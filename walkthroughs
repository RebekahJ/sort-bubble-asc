
[ 15, 57, 1, 67, 51 ]
len = 5
count = 0

(while) 0<5
A pass…

(for) i=0
count = 1
swap 57, 15 [57,15,1,67,51]
count = 0
i=1
count = 1
swap 15,1 [57,1,15,67,51]
count = 0
i=2
count = 1
i=3
count = 2
swap 67, 51 [57,1,15,51,67]
count = 0

(while) 0<5
A pass…

(for) i=0
count = 1
swap 57,1 [1,57,15,51,67]
count = 0
i=1
count = 1
swap 57,15 [1,15,57,51,67]
count = 0
i=2
count = 1
swap 57,51 [1,15,51,57,67] *DONE*
count = 0
i=3
count = 1

(while) 1<5
A pass…

(for) i=0
count = 2
i=1
count = 3
i=2
count = 4 (these were the last swap)
i=3
count = 5 (can exit now!) 

(while) 5 !< 5
BREAK

——

Could set if (count >= len) too…

Test with same data set…
Same - but this time in i=3 prints Done! statement - doesn’t check next while condition…
So is quicker when last element to swap is earlier in array

———

When 2, sorted elements:
- Takes 1 full pass, then exits at start of second

When 2 unsorted:
- Takes 2 full passes, exits at start of third

 









